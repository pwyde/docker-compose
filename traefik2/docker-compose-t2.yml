version: "3.5"
networks:
  docker_subnet:
    external: true
  traefik_proxy:
    name: traefik_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.1.0/24
secrets:
  cloudflare_email:
    file: ${SECRETS_DIR}/cloudflare_email
  cloudflare_api_key:
    file: ${SECRETS_DIR}/cloudflare_api_key
services:
  traefik:
    image: traefik:chevrotin # 'chevrotin' tag refers to v2.2.x
    container_name: traefik
    deploy:
      resources:
        limits:
          cpus: "1.00"
          memory: 256M
        reservations:
          cpus: "0.80"
          memory: 128M
    cap_drop:
      - ALL
    security_opt:
      - seccomp="/etc/docker/seccomp/default.json"
      - no-new-privileges
    restart: on-failure:5
    # If user namespaces is enabled, disable 'domainname' to avoid
    # permission errors.
    #domainname: ${INTERNAL_DOMAIN}
    hostname: traefik
    networks:
      docker_subnet:
        ipv4_address: ${TRAEFIK_IP}
      traefik_proxy:
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    read_only: true
    volumes:
      # Do not expose Docker daemon socket.
      #- /var/run/docker.sock:/var/run/docker.sock:ro
      - ${DOCKER_DIR}/traefik/certs:/certs
      - ${DOCKER_DIR}/traefik/rules:/rules
      - ${DOCKER_DIR}/traefik/secret:/secret:ro
      - ${DOCKER_DIR}/traefik/traefik.log:/traefik.log
    sysctls:
      # Allow an unprivileged user to listen on any port.
      net.ipv4.ip_unprivileged_port_start: "0"
    environment:
      - CF_API_EMAIL_FILE=/run/secrets/cloudflare_email
      - CF_API_KEY_FILE=/run/secrets/cloudflare_api_key
    secrets:
      - cloudflare_email
      - cloudflare_api_key
    command:
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=false
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --entryPoints.traefik.address=:8080
      - --api=true
      # Put Traefik dashboard (API) behind authentication.
      #- --api.insecure=true
      # Disables SSL certificate verification. if set to true.
      # NOTE: This option is not preferable but needed for certain docker
      # images, for example 'romancin/rutorrent-flood' and
      # 'linuxserver/nextcloud'.
      - --serversTransport.insecureSkipVerify=true
      - --log=true
      # DEBUG, INFO, WARN, ERROR, FATAL, PANIC (Default: ERROR)
      - --log.level=ERROR
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      # Configuring a buffer of 100 lines.
      - --accessLog.bufferingSize=100
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      # Do not use Docker daemon socket.
      #- --providers.docker.endpoint=unix:///var/run/docker.sock
      # Connect to Docker daemon using TCP.
      - --providers.docker.endpoint=tcp://${HOSTNAME}.${INTERNAL_DOMAIN}:2376
      # Enable Docker over TLS.
      - --providers.docker.tls.ca=/certs/docker/ca.pem
      - --providers.docker.tls.cert=/certs/docker/cert.pem
      - --providers.docker.tls.key=/certs/docker/key.pem
      - --providers.docker.tls.insecureSkipVerify=false
      # If no routing rule is defined by label, it is defined by the default
      # rule below.
      #- --providers.docker.defaultRule=Host(`{{ index .Labels "com.docker.compose.service" }}.${INTERNAL_DOMAIN}`)
      # Hide all Docker containers that do not have the 'traefik.enable=true'
      # labet set.
      - --providers.docker.exposedByDefault=false
      # Add 'dns-cloudflare' as default certificate resolver for all services.
      # Also enables TLS and no need to specify on individual services.
      - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      - --entrypoints.https.http.tls.domains[0].main=${EXTERNAL_DOMAIN}   # Pull certificate for external domain.
      - --entrypoints.https.http.tls.domains[0].sans=*.${EXTERNAL_DOMAIN} # Pull wildcard certificate for external domain.
      - --entrypoints.https.http.tls.domains[1].main=${INTERNAL_DOMAIN}   # Pull certificate for internal domain.
      - --entrypoints.https.http.tls.domains[1].sans=*.${INTERNAL_DOMAIN} # Pull wildcard certificate for internal domain.
      - --providers.docker.network=traefik_proxy
      - --providers.docker.swarmMode=false
      # Load dynamic configuration from one or more .toml or .yml files in a
      # directory.
      - --providers.file.directory=/rules
      # Load dynamic configuration from a file.
      #- --providers.file.filename=/path/to/file
      # Only works on top level files in the rules directory.
      - --providers.file.watch=true
      ## Define certificate resolver with the name 'dns-cloudflare'.
      # Use ACME staging. Remove comment to use stage servers.
      #- --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesResolvers.dns-cloudflare.acme.email=${CLOUDFLARE_EMAIL}
      - --certificatesResolvers.dns-cloudflare.acme.storage=/certs/acme/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      # Remove comment to use Cloudflare DNS for ACME DNS challenge.
      #- --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      # Delay DNS check and reduce Let's Encrypt hitrate.
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90
    labels:
      - "traefik.enable=true"
      # Redirect HTTP to HTTPS using router named 'http-catchall'.
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP router - 'traefik-rtr'.
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.${INTERNAL_DOMAIN}`)"
      # HTTP service - Traefik dashboard (API).
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      - "traefik.http.services.api@internal.loadbalancer.server.port=8080"
      # Middlewares.
      - "traefik.http.routers.traefik-rtr.middlewares=chain-basic-auth@file"
